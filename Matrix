#include <iostream>
#include <map>
#include <string>
#include <tuple>
#include <vector>
#include <algorithm>
#include <queue>
#include <string_view>
#include <cmath>
#include <numeric>
#include <cassert>

template <typename T>
class Matrix {
private:
    std::vector<T> vec;
    size_t rows;
    size_t col;

public:
    Matrix(const std::vector<std::vector<T>>& v) {
        for (auto lis : v) {
            for (auto el : lis) {
                vec.push_back(el);
            }
        }
        col = v[0].size();
        rows = v.size();
    }

    std::pair<size_t, size_t> size() const {
        return {rows, col};
    }

    T& operator[] (size_t i) {
        return vec[i];
    }

    const T& operator[] (size_t i) const {
        return vec[i];
    }

    auto end() {
        return vec.end();
    }

    auto begin() {
        return vec.begin();
    }

    auto end() const {
        return vec.end();
    }

    auto begin() const {
        return vec.begin();
    }

    Matrix<T>& transpose() {
        std::vector<std::vector<T>> ans;
        for (size_t j = 0; j < col; ++j) {
            std::vector<T> ans1;
            for (size_t i = 0; i < rows; ++i) {
                ans1.push_back(vec[i*col + j]);
            }
            ans.push_back(ans1);
            ans1.clear();
        }
        Matrix<T> m(ans);
        return m;
        *this = transposed(*this);
        return *this;
    }
    friend Matrix<T> transposed(const Matrix<T>& m1);

    friend Matrix<T>& transpose(Matrix<T>& m1);
};

template <typename T>
std::ostream& operator<< (std::ostream& out, const Matrix<T>& m) {
    auto [rows, col] = m.size();
    out << m[0];
    for (size_t j = 1; j < col; ++j) {
        out << '\t';
        out << m[j];
    }
    for (size_t i = 1; i < rows; ++i) {
        out << '\n';
        out << m[i*col];
        for (size_t j = 1; j < col; ++j) {
            out << '\t';
            out << m[i*col + j];
        }
    }
    return out;
}

template <typename T>
Matrix<T> operator+ (const Matrix<T>& m1, const Matrix<T>& m2) {
    Matrix ans = m1;
    auto [rows, col] = m1.size();
    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < col; ++j) {
            ans[i*col + j] += m2[i*col + j];
        }
    }
    return ans;
}

template <typename T>
Matrix<T> operator+= (Matrix<T>& m1, const Matrix<T>& m2) {
    m1 = m1 + m2;
    return m1;
}

template <typename T, typename T1>
Matrix<T> operator* (const Matrix<T>& m, T1 x) {
    Matrix<T> m1 = m;
    auto [rows, col] = m1.size();
    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < col; ++j) {
            m1[i*col + j] = m1[i*col + j] * x;
        }
    }
    return m1;
}

template <typename T, typename T1>
Matrix<T> operator*= (Matrix<T>& m1, T1 x) {
    m1 = m1 * x;
    return m1;
}

template <typename T>
Matrix<T> transposed(const Matrix<T>& m1) {
    auto [rows, col] = m1.size();
    std::vector<std::vector<T>> ans;
    for (size_t j = 0; j < col; ++j) {
        std::vector<T> ans1;
        for (size_t i = 0; i < rows; ++i) {
             ans1.push_back(m1[i*col + j]);
        }
        ans.push_back(ans1);
        ans1.clear();
    }
    Matrix<T> m(ans);
    return m;
}

template <typename T>
Matrix<T>& transpose(Matrix<T>& m1) {
    m1 = transposed(m1);
    return m1;
}

template <typename T, typename T1>
Matrix<T> operator* (const Matrix<T>& m1, const Matrix<T>& m2) {
    auto [rows1, col1] = m1.size();
    auto [rows2, col2] = m2.size();
    std::vector<std::vector<T>> ans;
    assert(rows2 == col1);
    for (size_t i = 0; i < rows1; ++i) {
        std::vector<T> ans1;
        for (size_t i = 0; i < col2; ++i) {}
        ans.push_back(ans1);
        ans1.clear();
    }
    Matrix<T> m(ans);
    return m;
}

template <typename T, typename T1>
Matrix<T> operator*= (Matrix<T>& m1, const Matrix<T>& m2) {
    m1 = m1 * m2;
    return m1;
}
