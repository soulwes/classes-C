class Segment_tree {
public:
    int n;
    std::vector<int> mod;
    std::vector<int> orig;
    Segment_tree(int size, std::vector<int> a): n(size), orig(a) {
        mod.resize(4*size);
    }

    void build(std::vector<int>& a, int v, int tl, int tr) {
        if (tl != tr) {
            build (a, v*2, tl, (tl + tr) / 2);
            build (a, v*2+1, ((tl + tr) / 2) +1, tr);
            mod[v] = (mod[v*2] + mod[v*2+1]);
        } else {
            mod[v] = a[tl];
        }
    }

    int sum (int v, int tl, int tr, int l, int r) {
        if (l > r) {
            return 0;
        }
        if (l == tl && r == tr) {
            return mod[v];
        }
        int tm = (tl + tr) / 2;
        return sum (v*2, tl, tm, l, std::min(r,tm))
               + sum (v*2+1, tm+1, tr, std::max(l,tm+1), r);
    }

    void update (int v, int tl, int tr, int pos, int new_val) {
        if (tl != tr) {
            int tm = (tl + tr) / 2;
            if (pos <= tm)
                update (v*2, tl, tm, pos, new_val);
            else
                update (v*2+1, tm+1, tr, pos, new_val);
            mod[v] = mod[v*2] + mod[v*2+1];
        } else {
            mod[v] = new_val;
            orig[tl] = new_val;
        }
    }
};
