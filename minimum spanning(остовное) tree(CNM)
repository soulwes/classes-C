#include <iostream>
#include <map>
#include <set>
#include <string>
#include <tuple>
#include <vector>
#include <algorithm>
#include <queue>
#include <string_view>
#include <cmath>
#include <numeric>
#include <cassert>
#include <memory>



class CNM {
private:
    std::vector<int> parent;
    std::vector<int> rank;

public:
    CNM (int n) {
        parent.resize(n+1);
        rank.resize(n+1);
        for (int i = 1; i <= n; ++i) {
            make(i);
        }
    }

    void make(int v) {
        parent[v] = v;
        rank[v] = 0;
    }

    int find(int v) {
        if (v == parent[v])
            return v;
        return parent[v] = find(parent[v]);
    }

    void unions(int a, int b) {
        a = find(a);
        b = find(b);
        if (a != b) {
            if (rank[a] < rank[b])
                std::swap(a, b);
            parent[b] = a;
            if (rank[a] == rank[b])
                ++rank[a];
        }
    }
};
