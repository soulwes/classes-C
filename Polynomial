#include <cstddef>
#include <vector>
#include <iostream>
#include <map>
#include <string>
#include <tuple>
#include <vector>
#include <algorithm>
#include <queue>
#include <string_view>
#include <cmath>
#include <numeric>

template <typename T>
class Polynomial {
private:
    std::vector<T> vec;

public:
    Polynomial(const std::vector<T>& v) : vec(v) {
        del_zeroes();
    }

    Polynomial(const T& elem = T(0)) {
        vec.push_back(elem);
        del_zeroes();
    }

    template<typename iterator>
    Polynomial(const iterator& first, const iterator& last) : vec(first, last) {
        del_zeroes();
    }

    size_t size() const {
        return vec.size();
    }

    const T operator[] (size_t i) const {
        if (i >= vec.size()) {
            return T(0);
        }
        return vec[i];
    }

    auto end() {
        return vec.end();
    }

    auto begin() {
        return vec.begin();
    }

    auto end() const {
        return vec.end();
    }

    auto begin() const {
        return vec.begin();
    }

    int Degree() const {
        if (vec.size() == 1) {
            if (vec[0] == T(0)) {
                return -1;
            }
            return 0;
        }
        return vec.size() - 1;
    }

    void del_zeroes() {
        for (size_t i = vec.size() - 1; i != 0; --i) {
            if (vec[i] == T(0)) {
                vec.pop_back();
            } else {
                break;
            }
        }
    }

    T operator() (const T& x) const {
        auto ans = vec[0];
        auto mul = x;
        for (size_t i = 1; i < vec.size(); ++i) {
            ans += vec[i] * mul;
            mul *= x;
        }
        return ans;
    }
};

template <typename T>
bool operator == (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    if (poly1.size() != poly2.size()) {
        return false;
    }
    for (size_t i = 0; i < poly2.size(); ++i) {
        if (poly1[i] != poly2[i]) {
            return false;
        }
    }
    return true;
}

template <typename T>
bool operator != (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    return !(poly1 == poly2);
}

template <typename T>
bool operator == (const Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    return (u == poly1);
}

template <typename T>
bool operator != (Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    return (u != poly1);
}

template <typename T>
Polynomial<T> operator + (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    std::vector<T> ans;
    if (poly2.size() >= poly1.size()) {
        ans.resize(poly2.size());
    } else {
        ans.resize(poly1.size());
    }
    for (size_t i = 0; i < poly1.size(); ++i) {
        ans[i] += poly1[i];
    }
    for (size_t i = 0; i < poly2.size(); ++i) {
        ans[i] += poly2[i];
    }
    Polynomial<T> poly_ans(ans);
    poly_ans.del_zeroes();
    return poly_ans;
}

template<typename T>
Polynomial<T>& operator += (Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    poly1 = poly1 + poly2;
    return poly1;
}

template <typename T>
Polynomial<T> operator + (const Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    u = poly1 + u;
    return u;
}

template <typename T>
Polynomial<T>& operator += (Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    poly1 = poly1 + u;
    return poly1;
}

template<typename T>
Polynomial<T> operator * (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    std::vector<T> ans;
    ans.resize(poly1.size() + poly2.size() - 1);
    for (size_t i = 0; i < poly1.size(); ++i) {
        for (size_t j = 0; j < poly2.size(); ++j) {
            ans[i + j] += poly1[i] * poly2[j];
        }
    }
    Polynomial<T> ans_poly(ans);
    ans_poly.del_zeroes();
    return ans_poly;
}

template<typename T>
Polynomial<T>& operator *= (Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    poly1 = poly1 * poly2;
    return poly1;
}

template <typename T>
Polynomial<T> operator * (const Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    u = poly1 * u;
    return u;
}

template <typename T>
Polynomial<T>& operator *= (Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    poly1 = poly1 * u;
    return poly1;
}

template <typename T>
Polynomial<T> operator - (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    std::vector<T> ans;
    if (poly2.size() >= poly1.size()) {
        ans.resize(poly2.size());
    } else {
        ans.resize(poly1.size());
    }
    for (size_t i = 0; i < poly1.size(); ++i) {
        ans[i] += poly1[i];
    }
    for (size_t i = 0; i < poly2.size(); ++i) {
        ans[i] -= poly2[i];
    }
    Polynomial<T> poly_ans(ans);
    poly_ans.del_zeroes();
    return poly_ans;
}

template<typename T>
Polynomial<T>& operator -= (Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    poly1 = poly1 - poly2;
    return poly1;
}

template <typename T>
Polynomial<T> operator - (const Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    u = poly1 - u;
    return u;
}

template <typename T>
Polynomial<T>& operator -= (Polynomial<T>& poly1, const T& el) {
    Polynomial u(el);
    poly1 = poly1 - u;
    return poly1;
}

template <typename T>
std::ostream& operator<< (std::ostream& out, const Polynomial<T>& poly) {
    if (poly.size() == 1) {
        if (poly[0] >= T(0)) {
            out << poly[0];
        } else if (poly[0] < T(0)) {
            out << "-" << T(-1)*poly[0];
        }
        return out;
    }
    if (poly.size() == 2) {
        if (poly[1] == T(1)) {
            out << "x";
        } else if (poly[1] == T(-1)) {
            out << "-x";
        } else if (poly[1] > T(0)) {
            out << poly[1] << "*x";
        } else if (poly[1] < T(0)) {
            out << "-" << T(-1)*poly[1] << "*x";
        }
        if (poly[0] > T(0)) {
            out << "+" << poly[0];
        } else if (poly[0] < T(0)) {
            out << "-" << T(-1)*poly[0];
        }
        return out;
    }
    if (poly[poly.size() - 1] == T(1)) {
        out << "x^" << poly.size() - 1;
    } else if (poly[poly.size() - 1] == T(-1)) {
        out << "-x^" << poly.size() - 1;
    } else if (poly[poly.size() - 1] > T(0)) {
        out << poly[poly.size() - 1] << "*x^" << poly.size() - 1;
    } else if (poly[poly.size() - 1] < T(0)) {
        out << "-" << T(-1)*poly[poly.size() - 1] << "*x^" << poly.size() - 1;
    }
    for (size_t i = poly.size() - 2; i != 1; --i) {
        if (poly[i] == T(1)) {
            out << "+x^" << i;
        } else if (poly[i] == T(-1)) {
            out << "-x^" << i;
        } else if (poly[i] > T(0)) {
            out << "+" << poly[i] << "*x^" << i;
        } else if (poly[i] < T(0)) {
            out << "-" << T(-1)*poly[i] << "*x^" << i;
        }
    }
    if (poly[1] == T(1)) {
        out << "+x";
    } else if (poly[1] == T(-1)) {
        out << "-x";
    } else if (poly[1] > T(0)) {
        out << "+" << poly[1] << "*x";
    } else if (poly[1] < T(0)) {
        out << "-" << T(-1)*poly[1] << "*x";
    }
    if (poly[0] > T(0)) {
        out << "+" << poly[0];
    } else if (poly[0] < T(0)) {
        out << "-" << T(-1)*poly[0];
    }
    return out;
}

template<typename T>
Polynomial<T> operator & (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    Polynomial<T> mul = poly2;
    Polynomial<T> ans(T(0));
    ans += poly1[0];
    for (size_t i = 1; i < poly1.size(); ++i) {
        ans += mul * poly1[i];
        mul *= poly2;
    }
    return ans;
}

template<typename T>
Polynomial<T> operator/ (const Polynomial<T> &poly1, const Polynomial<T> &poly2) {
    Polynomial<T> ans(T(0));
    Polynomial<T> poly1_copy = poly1;
    while (poly1_copy.Degree() >= poly2.Degree()) {
        std::vector<T> d(poly1_copy.Degree() - poly2.Degree() + 1, T(0));
        T quo = poly1_copy[poly1_copy.size() - 1] / poly2[poly2.size() - 1];
        d.back() = quo;
        ans += Polynomial(d);
        poly1_copy -= poly2 * Polynomial(d);
    }
    return ans;
}

template<typename T>
Polynomial<T> operator% (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    Polynomial<T> ans = poly1;
    Polynomial<T> div_res = poly1 / poly2;
    ans -= poly2 * div_res;
    return ans;
}

template<typename T>
Polynomial<T> operator, (const Polynomial<T>& poly1, const Polynomial<T>& poly2) {
    Polynomial<T> poly1_copy = poly1;
    Polynomial<T> poly2_copy = poly2;
    while (poly2_copy != T(0)) {
        poly1_copy = poly1_copy % poly2_copy;
        Polynomial<T> x(poly2_copy);
        poly2_copy = poly1_copy;
        poly1_copy = x;
    }
    if (poly1_copy != T(0)) {
        Polynomial<T> y(poly1_copy[poly1_copy.size() - 1]);
        poly1_copy = poly1_copy / y;
    }
    return poly1_copy;
}
